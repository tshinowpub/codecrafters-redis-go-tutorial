// Code generated by "enumer -type=ResultType -output=./result_type_enumer.go"; DO NOT EDIT.

package command

import (
	"fmt"
)

const _ResultTypeName = "OkFailed"

var _ResultTypeIndex = [...]uint8{0, 2, 8}

func (i ResultType) String() string {
	i -= 1
	if i < 0 || i >= ResultType(len(_ResultTypeIndex)-1) {
		return fmt.Sprintf("ResultType(%d)", i+1)
	}
	return _ResultTypeName[_ResultTypeIndex[i]:_ResultTypeIndex[i+1]]
}

var _ResultTypeValues = []ResultType{1, 2}

var _ResultTypeNameToValueMap = map[string]ResultType{
	_ResultTypeName[0:2]: 1,
	_ResultTypeName[2:8]: 2,
}

// ResultTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResultTypeString(s string) (ResultType, error) {
	if val, ok := _ResultTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResultType values", s)
}

// ResultTypeValues returns all values of the enum
func ResultTypeValues() []ResultType {
	return _ResultTypeValues
}

// IsAResultType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResultType) IsAResultType() bool {
	for _, v := range _ResultTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
